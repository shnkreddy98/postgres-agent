from dotenv import load_dotenv
import os
import psycopg2

from typing import Any
import httpx
from mcp.server.fastmcp import FastMCP

load_dotenv()

mcp = FastMCP("nba-postgres")

pghost = os.getenv("PGHOST")
pgdb = os.getenv("PGDATABASE")
pguser = os.getenv("PGUSER")
pgpswd = os.getenv("PGPASSWORD")

def connect_db():
    try:
        conn = psycopg2.connect(database=pgdb,
                                user=pguser,
                                host=pghost,
                                password=pgpswd)
        return conn
    except Exception as e:
        print("Couldn't connect to Database:", e)

@mcp.resource("schema://{tablename}")
def get_schema(tablename: str) -> str:
    # Get the table schema from the postgres database
    conn = connect_db()
    schema_query = """
                    SELECT 
                        c.column_name,
                        c.data_type,
                        c.is_nullable,
                        c.column_default,
                        d.description as column_comment
                    FROM information_schema.columns c
                    JOIN pg_class pc ON pc.relname = c.table_name
                    JOIN pg_attribute a ON pc.oid = a.attrelid AND a.attname = c.column_name
                    LEFT JOIN pg_description d ON pc.oid = d.objoid AND a.attnum = d.objsubid
                    WHERE c.table_name = %s
                        AND a.attnum > 0 
                        AND NOT a.attisdropped
                    ORDER BY c.ordinal_position;
                    """
    cur = conn.cursor()
    cur.execute(schema_query, (tablename,))
    schema = cur.fetchall()
    conn.close()

    if not schema:
        return f"Table {tablename} not found"
    
    # Convert to dictionary format
    schema_dict = {
        "table_name": tablename,
        "columns": []
    }
    
    for row in schema:
        column_info = {
            "column_name": row[0],
            "data_type": row[1],
            "is_nullable": row[2],
            "column_default": row[3],
            "column_comment": row[4]
        }
        schema_dict["columns"].append(column_info)
    
    return schema_dict

@mcp.tool()
def query_data(sql: str) -> str:
    # Execute queries generated by llm
    conn = connect_db()
    try:
        cur = conn.cursor()
        cur.execute(sql)
        result = cur.fetchall()
        return "\n".join(str(row) for row in result)
    except Exception as e:
        return f"Error: {str(e)}"

if __name__ == "__main__":
    mcp.run(transport='stdio')

